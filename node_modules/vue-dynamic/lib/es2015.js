import Vue from 'vue';

const { toString } = Object.prototype;
const isFunction = (arg) => typeof arg === 'function';
const isObject = (arg) => toString.call(arg) === '[object Object]';
const { warn } = Vue.util;

const objCompsToArr = (objComponents) => {
    const components = [];
    for (const [key, value] of Object.entries(objComponents)) {
        if (isObject(value)) {
            components.push(Object.assign(value, { name: key }));
        }
    }
    return components;
};
const invalidMsg = (msg) => warn(`invalid ${msg} will be ignored!`);
const nonMsg = (msg) => warn(`no ${msg} found thus it will be ignored!`);
const generateField = (comp, component, type) => {
    const field = comp[type];
    if (isObject(field)) {
        const wrappedField = {};
        for (const [fieldName, method] of Object.entries(field || {})) {
            // prettier-ignore
            wrappedField[fieldName] = isFunction(method)
                ? method
                // @ts-ignore
                : Function[Array.isArray(method) ? 'apply' : 'call'](null, method);
        }
        component[type] = wrappedField;
    }
    else if (field) {
        return invalidMsg(type);
    }
    return true;
};
const buildComponent = (comps, notFirst = false) => {
    if (!comps) {
        return;
    }
    if (isObject(comps)) {
        comps = objCompsToArr(comps);
    }
    else if (!Array.isArray(comps)) {
        return invalidMsg('components');
    }
    if (comps.length === 0) {
        return nonMsg('components');
    }
    let wrapTemp = '';
    const wrapComp = {};
    let count = 0;
    comps.forEach((comp, index) => {
        const { name = `Dynamic__${index}`, template, data, components } = comp;
        if (!template) {
            return nonMsg('template');
        }
        wrapTemp += `<${name}${notFirst ? '' : ' v-on="$parent.$listeners"'} />`;
        const component = (wrapComp[name] = { template });
        if (!generateField(comp, component, 'filters') ||
            !generateField(comp, component, 'methods')) {
            return;
        }
        if (data) {
            component.data = isFunction(data) ? data : () => (Object.assign({}, data));
        }
        if (components) {
            component.components = buildComponent(components, true);
        }
        count++;
    });
    if (!count) {
        return;
    }
    return notFirst
        ? wrapComp
        : {
            name: 'Dynamic__Root',
            template: count === 1 ? wrapTemp : `<div>${wrapTemp}</div>`,
            components: wrapComp,
        };
};
const Dynamic = {
    name: 'vue-dynamic',
    template: `<component :is="view" />`,
    props: {
        comps: {
            validator: (value) => !value || Array.isArray(value) || isObject(value),
        },
        emptyView: {
            required: true,
            validator: (value) => isObject(value),
        },
    },
    data() {
        return {
            view: this.emptyView,
        };
    },
    // @ts-ignore
    watch: {
        comps: {
            immediate: true,
            // @ts-ignore
            handler: 'build',
        },
    },
    methods: {
        build() {
            this.view = buildComponent(this.comps) || this.emptyView;
        },
    },
};

const VueDynamic = (Vue, options) => { var _a; return Vue.component(((_a = options) === null || _a === void 0 ? void 0 : _a.name) || 'Dynamic', Dynamic); };
if (typeof window !== 'undefined' && window.Vue) {
    // @ts-ignore
    window.Vue.use(VueDynamic);
}
const install = VueDynamic;

export default VueDynamic;
export { Dynamic, VueDynamic, install };
